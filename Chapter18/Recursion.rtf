{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red43\green138\blue83;\red255\green255\blue255;
\red47\green195\blue193;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c20000\c60000\c40000;\cssrgb\c100000\c100000\c100000;
\cssrgb\c20000\c80000\c80000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
Recursion\
Part I:
\f1\b0  Write a recursive method that displays a string in reverse order on the console using the following header:\
\'a0 \'a0 \'a0 \cf3 public static void reverseDisplay(String value)\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 To make sure this program makes efficient use of memory, have the method call a helper method that includes the string's high index:\cb1 \
\cb4 \'a0 \'a0 \'a0\cf3  public static void reverseDisplay(String value, int high)\cf2 \cb1 \
\cb4 Write a program to test your recursive method by prompting the user to enter a string and then displays it in reverse order. This program is the same as Exercise 18.12 of the textbook, page 744.\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb4 Sample Output:
\f1\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 Enter your string: 
\f0\b Able was I, I saw Elba\'a0
\f1\b0 (user input appears in bold adjacent the prompt)\cb1 \
\cb4 ablE was I ,I saw elbA (this is the program output)\cb1 \
\'a0\
\pard\pardeftab720\partightenfactor0

\f0\b \cf2 \cb4 Part II
\f1\b0 : Write a recursive method to print all permutations of a string. Then a write a program to test the method, by once again, prompting the user to enter a string of characters. For example, the permutations for the string "abc" are the following:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb4 abc\cf2 \cb1 \
\cf5 \cb4 acb\cf2 \cb1 \
\cf5 \cb4 bac\cf2 \cb1 \
\cf5 \cb4 bca\cf2 \cb1 \
\cf5 \cb4 cab\cf2 \cb1 \
\cf5 \cb4 cba\cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 Hint: Define the following two methods. The second is a helper method.\cb1 \
\cb4 \'a0 \'a0\'a0 public static void displayPermutation(String s)\cb1 \
\cb4 \'a0 \'a0\'a0 public static void displayPermutation(String s1, String s2)\cb1 \
\cb4 The first method simply invokes \cf3 displayPermutation(" ", s)\cf2 . The second method uses a loop to move a character from \cf3 s2\cf2  to \cf3 s1\cf2  and recursively invokes it new \cf3 s1\cf2  and \cf3 s2\cf2 . The base case is that \cf3 s2\cf2  is empty and prints \cf3 s1\cf2  to the console\cb1 \
\cb4 This program is the same as Exercise 18.25 of the textbook, page 746.\
\
}